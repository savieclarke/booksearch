{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","utils/queries.js","pages/SearchBooks.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","GET_ME","SEARCH_GOOGLE_BOOKS","SearchBooks","useState","searchInput","setSearchInput","searchedBooks","setSearchedBooks","setSavedBookIds","useMutation","saveBook","useLazyQuery","searchBooks","loading","error","data","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","variables","query","response","console","log","Error","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","handleSaveBook","bookToSave","find","Auth","loggedIn","ok","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","Spinner","animation","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","useQuery","userData","me","removeBook","userDataLength","Object","keys","getUserData","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","user","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","getProfile","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","graphqlLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.811c56d8.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation createUser($username: String!, $email: String!, $password: String!) {\n    createUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($book: BookInput!) {\n    saveBook(bookData: $book) {\n      username\n      email\n      bookCount\n      savedBooks {\n        authors\n        description\n        bookId\n        image\n        title\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation deleteBook($bookId: ID!) {\n    deleteBook(bookId: $bookId) {\n      username\n      bookCount\n      savedBooks {\n        authors\n        description\n        title\n        bookId\n        image\n        link\n      }\n      _id\n      email\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_ME = gql`\n  # create a GraphQL query to be executed by Apollo Client\n  query Me {\n    Me {\n      _id\n      username\n      email\n      bookCount\n      savedBooks {\n        bookId\n        description\n        image\n        title\n        authors\n      }\n    }\n  }\n`;\n\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const SEARCH_GOOGLE_BOOKS = gql`\n  query searchGoogleBooks($query: String!) {\n    books(query: $query) {\n      bookId\n      description\n      image\n      title\n      authors\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n  Spinner,\n} from \"react-bootstrap\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\n\nimport Auth from \"../utils/auth\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { SEARCH_GOOGLE_BOOKS } from \"../utils/queries\";\n\nconst SearchBooks = () => {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook] = useMutation(SAVE_BOOK);\n  const [searchBooks, { loading, error, data }] =\n    useLazyQuery(SEARCH_GOOGLE_BOOKS);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchBooks({\n        variables: { query: searchInput },\n      });\n\n      console.log(response);\n\n      if (error) {\n        throw new Error(\"There was an error with your search.\");\n      }\n\n      const { items } = data;\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook(bookToSave, token);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      {loading ? (\n        <Spinner animation=\"border\" variant=\"info\" />\n      ) : (\n        <Container>\n          <h2>\n            {searchedBooks.length\n              ? `Viewing ${searchedBooks.length} results:`\n              : \"Search for a book to begin\"}\n          </h2>\n          <CardColumns>\n            {searchedBooks.map((book) => {\n              return (\n                <Card key={book.bookId} border=\"dark\">\n                  {book.image ? (\n                    <Card.Img\n                      src={book.image}\n                      alt={`The cover for ${book.title}`}\n                      variant=\"top\"\n                    />\n                  ) : null}\n                  <Card.Body>\n                    <Card.Title>{book.title}</Card.Title>\n                    <p className=\"small\">Authors: {book.authors}</p>\n                    <Card.Text>{book.description}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button\n                        disabled={savedBookIds?.some(\n                          (savedBookId) => savedBookId === book.bookId\n                        )}\n                        className=\"btn-block btn-info\"\n                        onClick={() => handleSaveBook(book.bookId)}\n                      >\n                        {savedBookIds?.some(\n                          (savedBookId) => savedBookId === book.bookId\n                        )\n                          ? \"This book has already been saved!\"\n                          : \"Save this Book!\"}\n                      </Button>\n                    )}\n                  </Card.Body>\n                </Card>\n              );\n            })}\n          </CardColumns>\n        </Container>\n      )}\n    </>\n  );\n};\n\nexport default SearchBooks;\n","import React, { useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || {};\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        // const response = await getMe(token);\n\n        // if (!response.ok) {\n        //   throw new Error('something went wrong!');\n        // }\n\n        // const user = await response.json();\n        // setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await removeBook(bookId, token);\n\n      if (!response) {\n        throw new Error(\"Error!\");\n      }\n\n      // const updatedUser = await response.json();\n      // setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      const { token, user } = data;\n\n      Auth.login(data.addUser.token);\n\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({ variables: { ...userFormData } });\n\n      if (!data) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const {\n        login: { token, user },\n      } = data;\n\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\nimport LoginForm from \"./LoginForm\";\n\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <h3>{Auth.getProfile().username}</h3>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\n\nconst graphqlLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(graphqlLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<SearchBooks />} />\n            <Route path=\"/saved\" element={<SavedBooks />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}